(define (domain LightUP_Puzzle)
    (:requirements :strips :adl :typing :conditional-effects)
    (:types num xpos ypos)
    (:predicates 
        (adjacent ?x - xpos ?y - ypos ?x2 - xpos ?y2 - ypos)
        (increment ?n1 ?n2 - num)
        (right ?x1 ?x2 - xpos)
        (below ?y1 ?y2 - ypos)
        (lit ?x - xpos ?y - ypos)
        (black ?x - xpos ?y - ypos)
        (surrounded ?x - xpos ?y - ypos ?n - num)
        (left ?x1 ?x2 - xpos)
        (above ?y1 ?y2 - ypos)
    )
    
    (:action place-bulb
    	:parameters (?x1 - xpos ?y1 - ypos)
    	:precondition (and (not (black ?x1 ?y1)) (not (lit ?x1 ?y1)))
    	:effect (and (lit ?x1 ?y1)
                (forall (?x2 - xpos ?y2 - ypos ?n1 ?n2 - num)
                    (when (and (adjacent ?x1 ?y1 ?x2 ?y2) (black ?x2 ?y2) (surrounded ?x2 ?y2 ?n1) (increment ?n1 ?n2)) (and (not (surrounded ?x2 ?y2 ?n1)) (surrounded ?x2 ?y2 ?n2)))
                )
                    
                (forall(?x - xpos)
                    (when (and (left ?x ?x1) (not (black ?x ?y1)) (not (exists (?x2 - xpos) (and (black ?x2 ?y1) (right ?x2 ?x) (right ?x1 ?x2)) )) ) (and (lit ?x ?y1)))
                )
                    
                (forall(?x - xpos)
                    (when(and (right ?x ?x1) (not (black ?x ?y1)) (not (exists (?x2 - xpos) ( and(black ?x2 ?y1) (left ?x2 ?x) (left ?x1 ?x2)) )) ) (and (lit ?x ?y1)))
                )
                (forall(?y - ypos)
                    (when (and (above ?y ?y1) (not (black ?x1 ?y)) (not (exists (?y2 - ypos) (and (black ?x1 ?y2) (below ?y2 ?y) (below ?y1 ?y2)) ))  ) (and (lit ?x1 ?y)))
                )
                (forall(?y - ypos)
                    (when (and (below ?y ?y1) (not (black ?x1 ?y)) (not (exists (?y2 - ypos) (and (black ?x1 ?y2) (above ?y2 ?y) (above ?y1 ?y2)) )) ) (and (lit ?x1 ?y)))
                )
                )
    ) 
)